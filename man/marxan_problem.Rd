% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marxan_problem.R
\name{marxan_problem}
\alias{marxan_problem}
\alias{marxan_problem.default}
\alias{marxan_problem.character}
\title{Marxan conservation problem}
\usage{
marxan_problem(x, ...)

\method{marxan_problem}{default}(x, features, targets,
  targets_type = c("relative", "absolute"), locked_in = waiver(),
  locked_out = waiver(), penalty = 0, edge_factor = 0.5, ...)

\method{marxan_problem}{character}(x, ...)
}
\arguments{
\item{x}{\code{character} file path for Marxan input file (typically
called \emph{input.dat}) or a \code{\link[sp]{Spatial-class}} or 
\code{\link[raster]{Raster-class}} object containing planning unit data.}

\item{...}{not used}

\item{features}{\code{\link[raster]{Raster-class}} object containing
data on the distribution of features across the study area.}

\item{targets}{\code{numeric} amount of each feature to be represented
in the solution.}

\item{targets_type}{\code{character} name indicating if the \code{targets}
are expressed as "relative" (eg. 0.2 meaning that 20 \% of a feature 
needs to be conserved), or "absolute" (eg. 100 meaning that 100 units of a 
feature need to be conserved) amounts.}

\item{locked_in}{Object that determines which planning units that should be 
locked in. See details for more information.}

\item{locked_out}{Object that determines which planning units that should be 
locked out. See details for more information.}

\item{penalty}{\code{numeric} penalty for exposed edges. This
is equivalent to the
\href{http://marxan.net/downloads/uq_marxan_web_2/module2.html}{boundary 
length modifier (BLM)} parameter in \href{marxan.net}{Marxan}.}

\item{edge_factor}{\code{numeric} proportion to scale edges that do
not have any neighboring planning units. For example, an edge factor
of \code{0.5} is commonly used for planning units along the coast line.}
}
\value{
\code{link{ConservationProblem}} or \code{logical} \code{vector}
  indicating if which planning units were prioritized.
}
\description{
Create a Marxan conservation problem. Although users are encouraged to 
build and tailor conservation planning problems to suit their own needs, 
sometimes it is easier to just use a more familiar "canned" approach. To
address this need, this function provides a convenient wrapper for generating
and solving Marxan-style conservation problems. If users already have
their conservation planning data in the Marxan input format, this function
can be used to read such files and solve the Marxan problems using 
exact algorithm solvers.
}
\examples{
# create Marxan problem using spatial data
data(sim_pu_raster, sim_features)
p <- marxan_problem(sim_pu_raster, features=sim_features, targets=0.2, 
                    targets_type='relative', penalty=1, edge_factor=0.5)

# solve problem
s <- solve(p)

# show solution
plot(s)

\dontrun{
# create and solve Marxan problem using Marxan input files
file <- system.file('extdata/input.dat', package='prioritizr')
s <- marxan_problem(file)

# count number of selected planning units
print(sum(s))
}

}
