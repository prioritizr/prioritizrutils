% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solvers.R
\name{solvers}
\alias{solvers}
\alias{add_gurobi_solver}
\alias{add_lpsymphony_solver}
\alias{add_rsymphony_solver}
\alias{add_default_solver}
\title{Problem solvers}
\usage{
add_gurobi_solver(x, gap = 0.1, time_limit = .Machine$integer.max,
  presolve = 2, threads = 1, first_feasible = 0)

add_lpsymphony_solver(x, gap = 0.1, time_limit = -1, verbosity = 1,
  first_feasible = 0)

add_rsymphony_solver(x, gap = 0.1, time_limit = -1, first_feasible = 0,
  verbosity = 1)

add_default_solver(x)
}
\arguments{
\item{x}{\code{\link{ConservationProblem}} object.}

\item{gap}{\code{numeric} relative gap to optimality. The optimizer will
terminate when the difference between the upper and lower objective
function bounds is less than the gap times the upper bound. For example, a
value of 0.01 will result in the optimizer stopping when the difference
between the bounds is 1 percent of the upper bound.}

\item{time_limit}{\code{numeric} time limit in seconds to run the optimizer. 
The solver will return the current best solution when this time limit is
exceeded.}

\item{presolve}{\code{integer} number indicating how intensively the 
solver should try to simplify the problem before solving it. The default
value of 2 indicates to that the solver should be very aggressive in 
trying to simplify the problem.}

\item{threads}{\code{integer} number of threads to use for the
optimization algorithm. The default value of 1 will result in only 
one thread being used.}

\item{first_feasible}{\code{logical} should the first feasible solution be
be returned? If \code{first_feasible} is set to \code{TRUE}, the solver 
will return the first solution it encounters that meets all the 
constraints, regardless of solution quality. Note that the first feasible 
solution is not an arbitrary solution, rather it is derived from the 
relaxed solution, and is therefore often reasonably close to optimality.}

\item{verbosity}{\code{integer} how verbose should the solver be when
reporting progress on solving the problem?}
}
\description{
Specify the software and configurations used to solve a conservation planning 
problem. Below is a list of different solvers that can be added to a 
\code{\link{ConservationProblem}} object.
}
\details{
\describe{

\item{\code{add_gurobi_solver}}{\href{http://gurobi.com}{Gurobi} is a
    state-of-the-art commercial optimization software with an R package
    interface. It is by far the fastest of the solvers available in this
    package, however, it is also the only one that isn't free. That said, 
    free academic licenses are available. The \code{gurobi} package is 
    distributed with the Gurobi software suite. This solver uses the
    \code{gurobi} package to solve problems.}

\item{\code{add_rsymphony_solver}}{
    \href{https://projects.coin-or.org/SYMPHONY}{SYMPHONY} is an open-source
    integer programming solver that is part of the Computational 
    Infrastructure for Operations Research (COIN-OR) project, an initiative 
    to promote development of open-source tools for operations research (a 
    field that includes linear programming). The \code{Rsymphony} package 
    provides an interface to COIN-OR and is available on CRAN. This solver 
    uses the \code{Rsymphony} package to solve problems.}

\item{\code{add_lpsymphony_solver}}{The \code{lpsymphony} package provides a
   different interface to the COIN-OR software suite. Unlike the 
   \code{Rsymhpony} package, the \code{lpsymphony} package is distributed
   through 
   \href{http://bioconducto/packages/release/bioc/html/lpsymphony.html}{Bioconductor}. 
   On Windows and Mac, \code{lpsymphony} may be easier to
   may be easier to install. This solver uses the \code{lpsymphony} package 
   to solve.}

\item{\code{default_solver}}{This solver uses the best software installed 
   currently installed on the system.}

}
}
\examples{

# create basic problem with defaults
p <- problem(sim_pu_raster, sim_features) \%>\%
  add_minimum_set_objective() \%>\%
  add_relative_targets(0.1)

# add rsymphony solver with default settings
p \%>\% add_rsymphony_solver()

# add rsymphony solver with custom settings
p \%>\% add_rsymphony_solver(gap=0.05, time_limit=100)

\dontrun{
# add gurobi solver
p \%>\% add_gurobi_solver(gap=0.1, presolve=2, time_limit=100)

# add lpsolver solver
p \%>\% add_lpsymphony_solver(gap=0.1, time_limit=100)

}

}
