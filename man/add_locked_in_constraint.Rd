% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_locked_in_constraint.R
\name{add_locked_in_constraint}
\alias{add_locked_in_constraint}
\alias{add_locked_in_constraint}
\alias{add_locked_in_constraint}
\alias{add_locked_in_constraint}
\alias{add_locked_in_constraint}
\title{Add locked in constraints}
\arguments{
\item{x}{\code{\link{ConservationProblem}} object.}

\item{locked_in}{Object that determines which planning units that should be 
locked in. See details for more information.}
}
\value{
\code{\link{ConservationProblem}} object.
}
\description{
Add constraints constraints to lock in planning units
so that they are selected in the solution. For example, it may
be desirable to lock in planning units already within existing
protected areas so that the solutions fills in the gaps in the existing
reserve network.
}
\details{
The locked in planning units can be specified in several 
  different ways:

  \describe{
  
  \item{\code{integer} \code{vector}}{indices for which planning units should
    be locked in.}

  \item{\code{character}}{column name in the attribute table with 
    \code{logical} values indicating if planning units should be locked in. 
    Note that \code{locked_in} can only a \code{character} if the planning
    units in \code{x} are a \code{\link{SpatialPolygonsDataFrame-class}}, 
    \code{\link{SpatialLinesDataFrame-class}}, or 
    \code{\link{SpatialPointsDataFrame-class}} object.}

  \item{\code{\link[raster]{Raster-class}} object}{Planning units in \code{x} 
    that intersect with cells in \code{y} that are not equal to zero and 
    not \code{NA} are locked in.}

  \item{\code{\link[sp]{Spatial-class}} object.}{planning units in \code{x} 
    that spatially intersect with \code{locked_in} are locked in.}

 }
}
\examples{
# create basic problem
p1 <- problem(sim_pu_polygons, sim_features) \%>\%
  add_minimum_set_objective() \%>\%
  add_relative_targets(0.2)

# create problem with added locked in constraints using integers
p2 <- p1 \%>\% add_locked_in_constraint(which(sim_pu_polygons$locked_in))

# create problem with added locked in constraints using a field name
p3 <- p1 \%>\% add_locked_in_constraint('locked_in')

# create problem with added locked in constraints using raster data
p4 <- p1 \%>\% add_locked_in_constraint(sim_locked_in_raster)

# create problem with added locked in constraints using spatial polygons data
locked_in <- sim_pu_polygons[sim_pu_polygons$locked_in == 1,]
p5 <- p1 \%>\% add_locked_in_constraint(locked_in)

# solve problems
s1 <- solve(p1)
s2 <- solve(p2)
s3 <- solve(p3)
s4 <- solve(p4)
s5 <- solve(p5)

# plot solutions
par(mfrow=c(3,2))
plot(s1, main='none locked out')
plot(s1[s1$solution==1,], col='darkgreen', add=TRUE)

plot(s2, main='locked out (integer input)')
plot(s2[s2$solution==1,], col='darkgreen', add=TRUE)

plot(s3, main='locked out (character input)')
plot(s3[s3$solution==1,], col='darkgreen', add=TRUE)

plot(s4, main='locked out (raster input)')
plot(s4[s4$solution==1,], col='darkgreen', add=TRUE)

plot(s5, main='locked out (polygon input)')
plot(s5[s5$solution==1,], col='darkgreen', add=TRUE)

}
\seealso{
\code{\link{constraints}} for all the available constraints.
}
