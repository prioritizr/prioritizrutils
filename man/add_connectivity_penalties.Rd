% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_connectivity_penalties.R
\name{add_connectivity_penalties}
\alias{add_connectivity_penalties}
\title{Add connectivity penalties}
\usage{
add_connectivity_penalties(x, penalty, connectivity_data)
}
\arguments{
\item{x}{\code{\link{ConservationProblem-class}} object.}

\item{penalty}{\code{numeric} penalty for missing connections between
planning units. This is equivalent to the connectivity strength modifier 
(CSM; (XXX et al. XXXX). Defaults to one so that penalties are the
same as the values in the \code{data}.}

\item{connectivity_data}{\code{data.frame}, \code{matrix}, \code{\link[Matrix]{Matrix}} 
object that shows the strength of connectivity between consecutive planning 
units. If \code{data} is a matrix, then rows and columns represent 
each planing unit and the cell values represent the connectivity between
them. If \code{data} is a \code{data.frame} the column names 
be \code{'id1'}, \code{'id2'}, \code{'boundary'} where each row
shows the connectivity between two planning units (following the Marxan
format). The data can be describe symmetric or asymmetric 
connecitivity between planning units.}
}
\value{
\code{\link{ConservationProblem-class}} object.
}
\description{
Add penalties to a conservation problem to favor solutions that select
planning units with high connectivity between them.
}
\examples{
# load data
data(sim_pu_points, sim_features)

# create connectivity matrix that expresses connectivity as the inverse
# distance between planning units
connectivity_matrix <- 1 / (as.matrix(dist(sim_pu_points@coords)) + 1)

# create basic problem
p1 <- problem(sim_pu_polygons, sim_features) \%>\%
  add_minimum_set_objective() \%>\%
  add_relative_targets(0.2)

# create problem with low connectivity penalties
p2 <- p1 \%>\% add_connectivity_penalties(1000, connectivity_matrix)

# create problem with high connectivity penalties
# receive half the penalty as inner edges
p3 <- p1 \%>\% add_connectivity_penalties(10000, connectivity_matrix)

# solve problems
s <- list(solve(p1), solve(p2), solve(p3))

# plot solutions
par(mfrow=c(1,3))

plot(s[[1]], pch=19, main='basic solution')
points(s[[1]][s[[1]]$solution==1,], col='green', pch=19)

plot(s[[2]], pch=19, main='small penalties')
points(s[[2]][s[[2]]$solution==1,], col='green', pch=19)

plot(s[[3]], pch=19, main='high penalties')
points(s[[3]][s[[3]]$solution==1,], col='green', pch=19)

}
\seealso{
\code{\link{constraints}}, \code{\link{penalties}}.
}
